// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Proposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("description", Value.fromString(""));
    this.set("proposer", Value.fromBytes(Bytes.empty()));
    this.set("forVotes", Value.fromBigInt(BigInt.zero()));
    this.set("againstVotes", Value.fromBigInt(BigInt.zero()));
    this.set("startTime", Value.fromBigInt(BigInt.zero()));
    this.set("endTime", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Proposal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Proposal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Proposal", id.toString(), this);
    }
  }

  static load(id: string): Proposal | null {
    return changetype<Proposal | null>(store.get("Proposal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get eta(): BigInt | null {
    let value = this.get("eta");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eta(value: BigInt | null) {
    if (!value) {
      this.unset("eta");
    } else {
      this.set("eta", Value.fromBigInt(<BigInt>value));
    }
  }

  get proposer(): Bytes {
    let value = this.get("proposer");
    return value!.toBytes();
  }

  set proposer(value: Bytes) {
    this.set("proposer", Value.fromBytes(value));
  }

  get targets(): Array<Bytes> | null {
    let value = this.get("targets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set targets(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("targets");
    } else {
      this.set("targets", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get forVotes(): BigInt {
    let value = this.get("forVotes");
    return value!.toBigInt();
  }

  set forVotes(value: BigInt) {
    this.set("forVotes", Value.fromBigInt(value));
  }

  get againstVotes(): BigInt {
    let value = this.get("againstVotes");
    return value!.toBigInt();
  }

  set againstVotes(value: BigInt) {
    this.set("againstVotes", Value.fromBigInt(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    return value!.toBigInt();
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get endTime(): BigInt {
    let value = this.get("endTime");
    return value!.toBigInt();
  }

  set endTime(value: BigInt) {
    this.set("endTime", Value.fromBigInt(value));
  }

  get signatures(): Array<string> | null {
    let value = this.get("signatures");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set signatures(value: Array<string> | null) {
    if (!value) {
      this.unset("signatures");
    } else {
      this.set("signatures", Value.fromStringArray(<Array<string>>value));
    }
  }

  get calldatas(): Array<Bytes> | null {
    let value = this.get("calldatas");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set calldatas(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("calldatas");
    } else {
      this.set("calldatas", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get executed(): boolean {
    let value = this.get("executed");
    return value!.toBoolean();
  }

  set executed(value: boolean) {
    this.set("executed", Value.fromBoolean(value));
  }

  get canceled(): boolean {
    let value = this.get("canceled");
    return value!.toBoolean();
  }

  set canceled(value: boolean) {
    this.set("canceled", Value.fromBoolean(value));
  }
}
