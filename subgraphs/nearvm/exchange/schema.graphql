type Account @entity {
  id: ID!
  signerId: String!
  timestamp: BigInt
}

type Swap @entity {
  id: ID!
  action: String # Added action field to define what kind of action is occuring
  transaction: Transaction!
  timestamp: BigInt!
  pair: Pair!
  sender: String # ATTENTION
  from: String # ATTENTION
  amount0In: BigInt
  amount1In: BigInt
  amount0Out: BigInt
  amount1Out: BigInt
  to: String # ATTENTION
  # logIndex: BigInt 
  # amountUSD: BigDecimal! 
}

type Transaction @entity {
  id: ID! # txn hash
  blockNumber: BigInt!
  timestamp: BigInt!
  # mints: [Mint]! 
  # burns: [Burn]!
  # swaps: [Swap]!
}

type Pair @entity {
  id: ID! # pair address (corresponding to the pool ID)
  token0: Token!
  token1: Token!
}

type AddLiquidity @entity {
  id: ID!
  output: String
  timestamp: BigInt
  functionCalled: String
  functionAction: String
  firstPoolAmount: BigInt
  firstPool: String
  secondPoolAmount: BigInt
  secondPool: String
  sharesMinted: BigInt
}

type Token @entity {
  id: ID!
  # symbol: String!
  # name: String!
  # decimals: BigInt!
  # totalSupply: BigInt!
  # tradeVolume: BigDecimal!
  # tradeVolumeUSD: BigDecimal!
  # untrackedVolumeUSD: BigDecimal!
  # txCount: BigInt!
  # totalLiquidity: BigDecimal!
  # derivedETH: BigDecimal
  # tokenDayData: [TokenDayData!]!
  # pairDayDataBase: [PairDayData!]!
  # pairDayDataQuote: [PairDayData!]!
  # pairBase: [Pair!]!
  # pairQuote: [Pair!]!
}

type LiquidityPosition @entity {
  id: ID!
  # user: User!
  pair: Pair!
  liquidityTokenBalance: BigDecimal!
}